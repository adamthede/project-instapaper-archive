#!/usr/bin/env python3
# migrate_manifest.py
# Converts an old-style list-based manifest to the new dictionary-based format.

import os
import json
import shutil
from pathlib import Path
import logging
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# Path to the manifest file generated by the bulk import script
# This should be the SAME path used by bulk_import_instapaper_from_csv.py
BULK_MANIFEST_FILE = Path(os.getenv("INSTAPAPER_BULK_MANIFEST_FILE", Path.home() / ".instapaper_bulk_import_manifest.json"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)-8s %(message)s")
log = logging.getLogger("MigrateManifest")

def main():
    log.info(f"Attempting to migrate manifest file: {BULK_MANIFEST_FILE}")

    if not BULK_MANIFEST_FILE.exists():
        log.warning(f"Old manifest file {BULK_MANIFEST_FILE} not found. Nothing to migrate.")
        log.info("If you run the main bulk import script, it will create a new manifest in the new format.")
        return

    try:
        old_manifest_content = BULK_MANIFEST_FILE.read_text()
        old_data = json.loads(old_manifest_content)
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON from old manifest file {BULK_MANIFEST_FILE}: {e}")
        log.error("The file might already be in the new dictionary format or is corrupted.")
        log.info("Please check the file. If it looks like a dictionary (e.g., starts with {{), it might already be migrated or new.")
        return
    except Exception as e:
        log.error(f"Could not read the old manifest file {BULK_MANIFEST_FILE}: {e}")
        return

    if isinstance(old_data, dict):
        # Check if it looks like our new format already (e.g. has a "status" key in a value)
        is_new_format = False
        if old_data:
            # Ensure there's at least one item to check
            try:
                first_value = next(iter(old_data.values()))
                if isinstance(first_value, dict) and "status" in first_value:
                    is_new_format = True
            except StopIteration: # Handles empty dictionary
                log.info(f"Manifest file {BULK_MANIFEST_FILE} is an empty dictionary. No migration needed, but it's not in the old list format either.")
                return # Or treat as new/empty new as appropriate

        if is_new_format:
            log.info(f"Manifest file {BULK_MANIFEST_FILE} appears to already be in the new dictionary format. No migration needed.")
            return
        else:
            # This case means it's a dictionary but not the new format (e.g., empty or different structure)
            # And also not the old list format.
            log.warning(f"Manifest file {BULK_MANIFEST_FILE} is a dictionary, but not in the expected old list format nor the new status dictionary format. Migration aborted.")
            log.info("If it's an empty dictionary, it's ready for the new bulk importer. If it's an unknown dictionary format, please inspect it manually.")
            return

    if not isinstance(old_data, list):
        log.error("Old manifest data is not in the expected list format. Migration aborted.")
        log.error(f"Content starts with: {old_manifest_content[:100]}...")
        return

    log.info(f"Successfully loaded old manifest. Found {len(old_data)} processed IDs (list format).")

    new_manifest_data = {}
    migrated_count = 0
    skipped_non_string_count = 0

    for item in old_data:
        # Old manifest should contain stringified bookmark IDs
        if isinstance(item, (str, int)): # Handle if IDs were stored as int or str
            bid_str = str(item).strip()
            if bid_str:
                new_manifest_data[bid_str] = {
                    "status": "success_migrated",
                    "title": "Migrated from old manifest (title not available)",
                    "notes": "This entry was migrated from an old list-based manifest."
                }
                migrated_count += 1
            else:
                skipped_non_string_count +=1 # if item was an empty string after strip
        else:
            log.warning(f"Skipping item during migration as it is not a string or int: {item}")
            skipped_non_string_count += 1

    log.info(f"Migrated {migrated_count} entries to the new dictionary format.")
    if skipped_non_string_count > 0:
        log.warning(f"Skipped {skipped_non_string_count} entries that were not valid bookmark ID formats.")

    # Back up the old manifest file
    backup_file_name = BULK_MANIFEST_FILE.parent / f"{BULK_MANIFEST_FILE.name}.old_list_format_{datetime.now().strftime('%Y%m%d_%H%M%S')}.bak"
    try:
        shutil.copy2(BULK_MANIFEST_FILE, backup_file_name)
        log.info(f"Backed up old manifest to: {backup_file_name}")
    except Exception as e:
        log.error(f"Could not back up old manifest file: {e}. Halting migration to prevent data loss.")
        return

    # Save the new manifest data
    try:
        BULK_MANIFEST_FILE.write_text(json.dumps(new_manifest_data, indent=4))
        log.info(f"Successfully saved new manifest data to: {BULK_MANIFEST_FILE}")
        log.info("Migration complete. You can now run the main bulk import script.")
    except Exception as e:
        log.error(f"Could not write new manifest data: {e}")
        log.error("Your old manifest is backed up. Please check permissions or disk space.")

if __name__ == "__main__":
    main()